---
description: "Правила для React frontend"
globs: ["vite-src/src/**/*.tsx", "vite-src/src/**/*.ts"]
alwaysApply: true
---

# React Frontend Rules

## Архитектура и структура
- Размещай хуки инициализации в компонентах, где они логически используются
- НЕ создавай промежуточные компоненты только для вызова хуков
- Provider компоненты должны содержать только настройку провайдеров
- Бизнес-логика инициализации должна быть в страницах или компонентах, где она используется
- Избегай избыточного вложения компонентов без функциональной необходимости
- Инициализация настроек должна происходить в thunk actions, а не в хуках
- Передавай параметры напрямую в thunk, если они могут быть недоступны в state
- Thunk могут читать из state только если данные там гарантированно есть

## Компоненты
- Используй функциональные компоненты с TypeScript
- Типизируй пропсы через интерфейсы
- Используй React.FC или явную типизацию
- Размещай компоненты в папке `components/`
- Один компонент = один файл

## State Management
- Используй Redux Toolkit для глобального состояния
- Создавай slices в папке `features/`
- Используй `useSelector` и `useDispatch` хуки
- Предпочитай локальное состояние для UI состояния

## Стилизация
- Используй Tailwind CSS для стилей
- Комбинируй с Mantine компонентами
- Используй `clsx` для условных классов
- Создавай переиспользуемые стили через Tailwind

## Хуки
- Создавай custom hooks в папке `hooks/`
- Используй префикс `use` для custom hooks
- Типизируй возвращаемые значения хуков
- Разделяй логику на отдельные хуки
- Размещай хуки инициализации в компонентах, где они используются
- НЕ вызывай хуки в Provider компонентах без необходимости
- Выноси сложную логику компонентов в custom hooks
- Используй `useCallback` для оптимизации обработчиков событий

## Утилиты
- Размещай утилиты в папке `utils/`
- Типизируй все функции и их параметры
- Создавай чистые функции без побочных эффектов
- Используй async/await для асинхронных операций

## Импорты
- Используй алиасы `@/` для импортов из `src/`
- Группируй импорты: внешние библиотеки, внутренние модули, типы
- Используй именованные импорты где возможно

## Обработка ошибок
- Используй Error Boundaries для компонентов
- Показывай понятные сообщения об ошибках
- Логируй ошибки в консоль для разработки
- Предоставляй fallback UI для ошибок

## Производительность
- Используй `React.memo` для оптимизации рендеринга
- Избегай создания объектов в render
- Используй `useCallback` и `useMemo` разумно
- Ленивая загрузка для больших компонентов