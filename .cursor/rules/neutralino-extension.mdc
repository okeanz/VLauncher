---
description: "Правила для Neutralino.js extension"
globs: ["vite-src/extension/**/*.ts", "vite-src/extension/**/*.js"]
alwaysApply: true
---

# Neutralino.js Extension Rules

## Архитектура Extension
- Extension работает в отдельном процессе от frontend
- Используй модульную архитектуру с разделением на handlers, utils, api
- Все файлы должны быть в формате ES modules (`"type": "module"`)

## API Design
- Создавай отдельные файлы для каждого API endpoint
- Используй единообразные имена функций: `verb + Resource` (например, `fetchArchive`, `extractArchive`)
- Возвращай Promise для всех асинхронных операций
- Обрабатывай ошибки и передавай их в frontend
- **Папка `api/` только для HTTP запросов и настроек axios**

## Handlers
- Размещай обработчики WebSocket событий в папке `handlers/`
- Используй единообразные имена функций: `verb + Resource` (например, `enableValheimOptimization`)
- Возвращай Promise<void> для обработчиков событий
- Обрабатывай ошибки и логируй их

## Файловая система
- Используй `fs` модуль для работы с файлами
- Всегда проверяй существование файлов/папок перед операциями
- Создавай папки рекурсивно с `{ recursive: true }`
- Используй `path.join()` для построения путей

## Архивы
- Используй `adm-zip` для работы с ZIP архивами
- Проверяй валидность архива перед извлечением
- Логируй прогресс операций с архивами
- Обрабатывай случаи поврежденных архивов

## Импорты
- **ОБЯЗАТЕЛЬНО**: используй расширения `.js` для всех импортов
- Импортируй утилиты из `../utils/logger.js`
- Импортируй API из `../api/` с расширением `.js`
- Используй относительные пути для внутренних модулей

## Логирование
- Используй утилиты `logInfo`, `logError` из `utils/logger.js`
- Добавляй префикс с именем функции в логах: `[functionName] message`
- Логируй начало и завершение важных операций
- Не логируй чувствительные данные (пароли, токены)
- Используй локальное время для временных меток (не UTC)
- Логи автоматически отправляются через WebSocket события

## WebSocket
- Используй WebSocket для коммуникации с frontend
- Отправляй статус операций в реальном времени
- Обрабатывай разрыв соединения gracefully
- `extensions.dispatch` НЕ возвращает ответ - это событие
- НЕ пытайся получить ответ от `extensions.dispatch`

## Операции с файлами
- Проверяй необходимость изменений перед записью в файл
- Если строки уже есть - не трогай файл
- Если файл не существует - создавай его
- Логируй только важные операции, не каждую строку
- Оптимизируй логирование - показывай общее количество операций
- Функции должны сами логировать результаты операций
- НЕ возвращай булевы значения только для логирования
- Удаляй неиспользуемые функции и события