---
description: "Правила для Neutralino.js extension"
globs: ["vite-src/extension/**/*.ts", "vite-src/extension/**/*.js"]
alwaysApply: true
---

# Neutralino.js Extension Rules

## Архитектура Extension
- Extension работает в отдельном процессе от frontend
- Используй модульную архитектуру с разделением на handlers, utils, api
- Все файлы должны быть в формате ES modules (`"type": "module"`)

## API Design
- Создавай отдельные файлы для каждого API endpoint
- Используй единообразные имена функций: `verb + Resource` (например, `fetchArchive`, `extractArchive`)
- Возвращай Promise для всех асинхронных операций
- Обрабатывай ошибки и передавай их в frontend

## Файловая система
- Используй `fs` модуль для работы с файлами
- Всегда проверяй существование файлов/папок перед операциями
- Создавай папки рекурсивно с `{ recursive: true }`
- Используй `path.join()` для построения путей

## Архивы
- Используй `adm-zip` для работы с ZIP архивами
- Проверяй валидность архива перед извлечением
- Логируй прогресс операций с архивами
- Обрабатывай случаи поврежденных архивов

## Логирование
- Используй утилиты `logInfo`, `logError` из `utils/logger.js`
- Добавляй префикс с именем функции в логах: `[functionName] message`
- Логируй начало и завершение важных операций
- Не логируй чувствительные данные (пароли, токены)

## WebSocket
- Используй WebSocket для коммуникации с frontend
- Отправляй статус операций в реальном времени
- Обрабатывай разрыв соединения gracefully